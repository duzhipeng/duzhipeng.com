// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bot/ent/order"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Order is the model entity for the Order schema.
type Order struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// MaintOrderNo holds the value of the "maintOrderNo" field.
	MaintOrderNo string `json:"maintOrderNo,omitempty"`
	// VehiclePlateNo holds the value of the "vehiclePlateNo" field.
	VehiclePlateNo string `json:"vehiclePlateNo,omitempty"`
	// VehicleTeamName holds the value of the "vehicleTeamName" field.
	VehicleTeamName string `json:"vehicleTeamName,omitempty"`
	// MaintRequestType holds the value of the "maintRequestType" field.
	MaintRequestType string `json:"maintRequestType,omitempty"`
	// DispatchedStationId holds the value of the "dispatchedStationId" field.
	DispatchedStationId int `json:"dispatchedStationId,omitempty"`
	// StationName holds the value of the "stationName" field.
	StationName string `json:"stationName,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Order) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case order.FieldID, order.FieldDispatchedStationId:
			values[i] = new(sql.NullInt64)
		case order.FieldMaintOrderNo, order.FieldVehiclePlateNo, order.FieldVehicleTeamName, order.FieldMaintRequestType, order.FieldStationName:
			values[i] = new(sql.NullString)
		case order.FieldCreatedAt, order.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Order fields.
func (o *Order) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case order.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case order.FieldMaintOrderNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field maintOrderNo", values[i])
			} else if value.Valid {
				o.MaintOrderNo = value.String
			}
		case order.FieldVehiclePlateNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vehiclePlateNo", values[i])
			} else if value.Valid {
				o.VehiclePlateNo = value.String
			}
		case order.FieldVehicleTeamName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vehicleTeamName", values[i])
			} else if value.Valid {
				o.VehicleTeamName = value.String
			}
		case order.FieldMaintRequestType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field maintRequestType", values[i])
			} else if value.Valid {
				o.MaintRequestType = value.String
			}
		case order.FieldDispatchedStationId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dispatchedStationId", values[i])
			} else if value.Valid {
				o.DispatchedStationId = int(value.Int64)
			}
		case order.FieldStationName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stationName", values[i])
			} else if value.Valid {
				o.StationName = value.String
			}
		case order.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				o.CreatedAt = value.Time
			}
		case order.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				o.UpdatedAt = value.Time
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Order.
// This includes values selected through modifiers, order, etc.
func (o *Order) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// Update returns a builder for updating this Order.
// Note that you need to call Order.Unwrap() before calling this method if this Order
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Order) Update() *OrderUpdateOne {
	return NewOrderClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Order entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Order) Unwrap() *Order {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Order is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Order) String() string {
	var builder strings.Builder
	builder.WriteString("Order(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("maintOrderNo=")
	builder.WriteString(o.MaintOrderNo)
	builder.WriteString(", ")
	builder.WriteString("vehiclePlateNo=")
	builder.WriteString(o.VehiclePlateNo)
	builder.WriteString(", ")
	builder.WriteString("vehicleTeamName=")
	builder.WriteString(o.VehicleTeamName)
	builder.WriteString(", ")
	builder.WriteString("maintRequestType=")
	builder.WriteString(o.MaintRequestType)
	builder.WriteString(", ")
	builder.WriteString("dispatchedStationId=")
	builder.WriteString(fmt.Sprintf("%v", o.DispatchedStationId))
	builder.WriteString(", ")
	builder.WriteString("stationName=")
	builder.WriteString(o.StationName)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(o.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(o.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Orders is a parsable slice of Order.
type Orders []*Order
