// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"core/ent/order"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderCreate is the builder for creating a Order entity.
type OrderCreate struct {
	config
	mutation *OrderMutation
	hooks    []Hook
}

// SetMaintOrderNo sets the "maintOrderNo" field.
func (oc *OrderCreate) SetMaintOrderNo(s string) *OrderCreate {
	oc.mutation.SetMaintOrderNo(s)
	return oc
}

// SetVehiclePlateNo sets the "vehiclePlateNo" field.
func (oc *OrderCreate) SetVehiclePlateNo(s string) *OrderCreate {
	oc.mutation.SetVehiclePlateNo(s)
	return oc
}

// SetVehicleTeamName sets the "vehicleTeamName" field.
func (oc *OrderCreate) SetVehicleTeamName(s string) *OrderCreate {
	oc.mutation.SetVehicleTeamName(s)
	return oc
}

// SetMaintRequestType sets the "maintRequestType" field.
func (oc *OrderCreate) SetMaintRequestType(s string) *OrderCreate {
	oc.mutation.SetMaintRequestType(s)
	return oc
}

// SetDispatchedStationId sets the "dispatchedStationId" field.
func (oc *OrderCreate) SetDispatchedStationId(i int) *OrderCreate {
	oc.mutation.SetDispatchedStationId(i)
	return oc
}

// SetStationName sets the "stationName" field.
func (oc *OrderCreate) SetStationName(s string) *OrderCreate {
	oc.mutation.SetStationName(s)
	return oc
}

// SetCreatedAt sets the "created_at" field.
func (oc *OrderCreate) SetCreatedAt(t time.Time) *OrderCreate {
	oc.mutation.SetCreatedAt(t)
	return oc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCreatedAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetCreatedAt(*t)
	}
	return oc
}

// SetUpdatedAt sets the "updated_at" field.
func (oc *OrderCreate) SetUpdatedAt(t time.Time) *OrderCreate {
	oc.mutation.SetUpdatedAt(t)
	return oc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableUpdatedAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetUpdatedAt(*t)
	}
	return oc
}

// Mutation returns the OrderMutation object of the builder.
func (oc *OrderCreate) Mutation() *OrderMutation {
	return oc.mutation
}

// Save creates the Order in the database.
func (oc *OrderCreate) Save(ctx context.Context) (*Order, error) {
	oc.defaults()
	return withHooks(ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OrderCreate) SaveX(ctx context.Context) *Order {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OrderCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OrderCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OrderCreate) defaults() {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		v := order.DefaultCreatedAt()
		oc.mutation.SetCreatedAt(v)
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		v := order.DefaultUpdatedAt()
		oc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OrderCreate) check() error {
	if _, ok := oc.mutation.MaintOrderNo(); !ok {
		return &ValidationError{Name: "maintOrderNo", err: errors.New(`ent: missing required field "Order.maintOrderNo"`)}
	}
	if v, ok := oc.mutation.MaintOrderNo(); ok {
		if err := order.MaintOrderNoValidator(v); err != nil {
			return &ValidationError{Name: "maintOrderNo", err: fmt.Errorf(`ent: validator failed for field "Order.maintOrderNo": %w`, err)}
		}
	}
	if _, ok := oc.mutation.VehiclePlateNo(); !ok {
		return &ValidationError{Name: "vehiclePlateNo", err: errors.New(`ent: missing required field "Order.vehiclePlateNo"`)}
	}
	if v, ok := oc.mutation.VehiclePlateNo(); ok {
		if err := order.VehiclePlateNoValidator(v); err != nil {
			return &ValidationError{Name: "vehiclePlateNo", err: fmt.Errorf(`ent: validator failed for field "Order.vehiclePlateNo": %w`, err)}
		}
	}
	if _, ok := oc.mutation.VehicleTeamName(); !ok {
		return &ValidationError{Name: "vehicleTeamName", err: errors.New(`ent: missing required field "Order.vehicleTeamName"`)}
	}
	if v, ok := oc.mutation.VehicleTeamName(); ok {
		if err := order.VehicleTeamNameValidator(v); err != nil {
			return &ValidationError{Name: "vehicleTeamName", err: fmt.Errorf(`ent: validator failed for field "Order.vehicleTeamName": %w`, err)}
		}
	}
	if _, ok := oc.mutation.MaintRequestType(); !ok {
		return &ValidationError{Name: "maintRequestType", err: errors.New(`ent: missing required field "Order.maintRequestType"`)}
	}
	if v, ok := oc.mutation.MaintRequestType(); ok {
		if err := order.MaintRequestTypeValidator(v); err != nil {
			return &ValidationError{Name: "maintRequestType", err: fmt.Errorf(`ent: validator failed for field "Order.maintRequestType": %w`, err)}
		}
	}
	if _, ok := oc.mutation.DispatchedStationId(); !ok {
		return &ValidationError{Name: "dispatchedStationId", err: errors.New(`ent: missing required field "Order.dispatchedStationId"`)}
	}
	if _, ok := oc.mutation.StationName(); !ok {
		return &ValidationError{Name: "stationName", err: errors.New(`ent: missing required field "Order.stationName"`)}
	}
	if v, ok := oc.mutation.StationName(); ok {
		if err := order.StationNameValidator(v); err != nil {
			return &ValidationError{Name: "stationName", err: fmt.Errorf(`ent: validator failed for field "Order.stationName": %w`, err)}
		}
	}
	if _, ok := oc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Order.created_at"`)}
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Order.updated_at"`)}
	}
	return nil
}

func (oc *OrderCreate) sqlSave(ctx context.Context) (*Order, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *OrderCreate) createSpec() (*Order, *sqlgraph.CreateSpec) {
	var (
		_node = &Order{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(order.Table, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt))
	)
	if value, ok := oc.mutation.MaintOrderNo(); ok {
		_spec.SetField(order.FieldMaintOrderNo, field.TypeString, value)
		_node.MaintOrderNo = value
	}
	if value, ok := oc.mutation.VehiclePlateNo(); ok {
		_spec.SetField(order.FieldVehiclePlateNo, field.TypeString, value)
		_node.VehiclePlateNo = value
	}
	if value, ok := oc.mutation.VehicleTeamName(); ok {
		_spec.SetField(order.FieldVehicleTeamName, field.TypeString, value)
		_node.VehicleTeamName = value
	}
	if value, ok := oc.mutation.MaintRequestType(); ok {
		_spec.SetField(order.FieldMaintRequestType, field.TypeString, value)
		_node.MaintRequestType = value
	}
	if value, ok := oc.mutation.DispatchedStationId(); ok {
		_spec.SetField(order.FieldDispatchedStationId, field.TypeInt, value)
		_node.DispatchedStationId = value
	}
	if value, ok := oc.mutation.StationName(); ok {
		_spec.SetField(order.FieldStationName, field.TypeString, value)
		_node.StationName = value
	}
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.SetField(order.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := oc.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// OrderCreateBulk is the builder for creating many Order entities in bulk.
type OrderCreateBulk struct {
	config
	err      error
	builders []*OrderCreate
}

// Save creates the Order entities in the database.
func (ocb *OrderCreateBulk) Save(ctx context.Context) ([]*Order, error) {
	if ocb.err != nil {
		return nil, ocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Order, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OrderCreateBulk) SaveX(ctx context.Context) []*Order {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OrderCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OrderCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}
