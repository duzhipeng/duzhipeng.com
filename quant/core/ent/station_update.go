// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"core/ent/predicate"
	"core/ent/station"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StationUpdate is the builder for updating Station entities.
type StationUpdate struct {
	config
	hooks    []Hook
	mutation *StationMutation
}

// Where appends a list predicates to the StationUpdate builder.
func (su *StationUpdate) Where(ps ...predicate.Station) *StationUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetAgencyId sets the "agencyId" field.
func (su *StationUpdate) SetAgencyId(i int) *StationUpdate {
	su.mutation.ResetAgencyId()
	su.mutation.SetAgencyId(i)
	return su
}

// SetNillableAgencyId sets the "agencyId" field if the given value is not nil.
func (su *StationUpdate) SetNillableAgencyId(i *int) *StationUpdate {
	if i != nil {
		su.SetAgencyId(*i)
	}
	return su
}

// AddAgencyId adds i to the "agencyId" field.
func (su *StationUpdate) AddAgencyId(i int) *StationUpdate {
	su.mutation.AddAgencyId(i)
	return su
}

// SetAgencyName sets the "agencyName" field.
func (su *StationUpdate) SetAgencyName(s string) *StationUpdate {
	su.mutation.SetAgencyName(s)
	return su
}

// SetNillableAgencyName sets the "agencyName" field if the given value is not nil.
func (su *StationUpdate) SetNillableAgencyName(s *string) *StationUpdate {
	if s != nil {
		su.SetAgencyName(*s)
	}
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *StationUpdate) SetUpdatedAt(t time.Time) *StationUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// Mutation returns the StationMutation object of the builder.
func (su *StationUpdate) Mutation() *StationMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StationUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StationUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StationUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StationUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *StationUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := station.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *StationUpdate) check() error {
	if v, ok := su.mutation.AgencyName(); ok {
		if err := station.AgencyNameValidator(v); err != nil {
			return &ValidationError{Name: "agencyName", err: fmt.Errorf(`ent: validator failed for field "Station.agencyName": %w`, err)}
		}
	}
	return nil
}

func (su *StationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(station.Table, station.Columns, sqlgraph.NewFieldSpec(station.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.AgencyId(); ok {
		_spec.SetField(station.FieldAgencyId, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedAgencyId(); ok {
		_spec.AddField(station.FieldAgencyId, field.TypeInt, value)
	}
	if value, ok := su.mutation.AgencyName(); ok {
		_spec.SetField(station.FieldAgencyName, field.TypeString, value)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(station.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{station.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StationUpdateOne is the builder for updating a single Station entity.
type StationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StationMutation
}

// SetAgencyId sets the "agencyId" field.
func (suo *StationUpdateOne) SetAgencyId(i int) *StationUpdateOne {
	suo.mutation.ResetAgencyId()
	suo.mutation.SetAgencyId(i)
	return suo
}

// SetNillableAgencyId sets the "agencyId" field if the given value is not nil.
func (suo *StationUpdateOne) SetNillableAgencyId(i *int) *StationUpdateOne {
	if i != nil {
		suo.SetAgencyId(*i)
	}
	return suo
}

// AddAgencyId adds i to the "agencyId" field.
func (suo *StationUpdateOne) AddAgencyId(i int) *StationUpdateOne {
	suo.mutation.AddAgencyId(i)
	return suo
}

// SetAgencyName sets the "agencyName" field.
func (suo *StationUpdateOne) SetAgencyName(s string) *StationUpdateOne {
	suo.mutation.SetAgencyName(s)
	return suo
}

// SetNillableAgencyName sets the "agencyName" field if the given value is not nil.
func (suo *StationUpdateOne) SetNillableAgencyName(s *string) *StationUpdateOne {
	if s != nil {
		suo.SetAgencyName(*s)
	}
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *StationUpdateOne) SetUpdatedAt(t time.Time) *StationUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// Mutation returns the StationMutation object of the builder.
func (suo *StationUpdateOne) Mutation() *StationMutation {
	return suo.mutation
}

// Where appends a list predicates to the StationUpdate builder.
func (suo *StationUpdateOne) Where(ps ...predicate.Station) *StationUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StationUpdateOne) Select(field string, fields ...string) *StationUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Station entity.
func (suo *StationUpdateOne) Save(ctx context.Context) (*Station, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StationUpdateOne) SaveX(ctx context.Context) *Station {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StationUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StationUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *StationUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := station.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *StationUpdateOne) check() error {
	if v, ok := suo.mutation.AgencyName(); ok {
		if err := station.AgencyNameValidator(v); err != nil {
			return &ValidationError{Name: "agencyName", err: fmt.Errorf(`ent: validator failed for field "Station.agencyName": %w`, err)}
		}
	}
	return nil
}

func (suo *StationUpdateOne) sqlSave(ctx context.Context) (_node *Station, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(station.Table, station.Columns, sqlgraph.NewFieldSpec(station.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Station.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, station.FieldID)
		for _, f := range fields {
			if !station.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != station.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.AgencyId(); ok {
		_spec.SetField(station.FieldAgencyId, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedAgencyId(); ok {
		_spec.AddField(station.FieldAgencyId, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AgencyName(); ok {
		_spec.SetField(station.FieldAgencyName, field.TypeString, value)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(station.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Station{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{station.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
