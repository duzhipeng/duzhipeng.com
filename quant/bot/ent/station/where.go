// Code generated by ent, DO NOT EDIT.

package station

import (
	"bot/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Station {
	return predicate.Station(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Station {
	return predicate.Station(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Station {
	return predicate.Station(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Station {
	return predicate.Station(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Station {
	return predicate.Station(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Station {
	return predicate.Station(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Station {
	return predicate.Station(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Station {
	return predicate.Station(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Station {
	return predicate.Station(sql.FieldLTE(FieldID, id))
}

// AgencyId applies equality check predicate on the "agencyId" field. It's identical to AgencyIdEQ.
func AgencyId(v int) predicate.Station {
	return predicate.Station(sql.FieldEQ(FieldAgencyId, v))
}

// AgencyName applies equality check predicate on the "agencyName" field. It's identical to AgencyNameEQ.
func AgencyName(v string) predicate.Station {
	return predicate.Station(sql.FieldEQ(FieldAgencyName, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Station {
	return predicate.Station(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Station {
	return predicate.Station(sql.FieldEQ(FieldUpdatedAt, v))
}

// AgencyIdEQ applies the EQ predicate on the "agencyId" field.
func AgencyIdEQ(v int) predicate.Station {
	return predicate.Station(sql.FieldEQ(FieldAgencyId, v))
}

// AgencyIdNEQ applies the NEQ predicate on the "agencyId" field.
func AgencyIdNEQ(v int) predicate.Station {
	return predicate.Station(sql.FieldNEQ(FieldAgencyId, v))
}

// AgencyIdIn applies the In predicate on the "agencyId" field.
func AgencyIdIn(vs ...int) predicate.Station {
	return predicate.Station(sql.FieldIn(FieldAgencyId, vs...))
}

// AgencyIdNotIn applies the NotIn predicate on the "agencyId" field.
func AgencyIdNotIn(vs ...int) predicate.Station {
	return predicate.Station(sql.FieldNotIn(FieldAgencyId, vs...))
}

// AgencyIdGT applies the GT predicate on the "agencyId" field.
func AgencyIdGT(v int) predicate.Station {
	return predicate.Station(sql.FieldGT(FieldAgencyId, v))
}

// AgencyIdGTE applies the GTE predicate on the "agencyId" field.
func AgencyIdGTE(v int) predicate.Station {
	return predicate.Station(sql.FieldGTE(FieldAgencyId, v))
}

// AgencyIdLT applies the LT predicate on the "agencyId" field.
func AgencyIdLT(v int) predicate.Station {
	return predicate.Station(sql.FieldLT(FieldAgencyId, v))
}

// AgencyIdLTE applies the LTE predicate on the "agencyId" field.
func AgencyIdLTE(v int) predicate.Station {
	return predicate.Station(sql.FieldLTE(FieldAgencyId, v))
}

// AgencyNameEQ applies the EQ predicate on the "agencyName" field.
func AgencyNameEQ(v string) predicate.Station {
	return predicate.Station(sql.FieldEQ(FieldAgencyName, v))
}

// AgencyNameNEQ applies the NEQ predicate on the "agencyName" field.
func AgencyNameNEQ(v string) predicate.Station {
	return predicate.Station(sql.FieldNEQ(FieldAgencyName, v))
}

// AgencyNameIn applies the In predicate on the "agencyName" field.
func AgencyNameIn(vs ...string) predicate.Station {
	return predicate.Station(sql.FieldIn(FieldAgencyName, vs...))
}

// AgencyNameNotIn applies the NotIn predicate on the "agencyName" field.
func AgencyNameNotIn(vs ...string) predicate.Station {
	return predicate.Station(sql.FieldNotIn(FieldAgencyName, vs...))
}

// AgencyNameGT applies the GT predicate on the "agencyName" field.
func AgencyNameGT(v string) predicate.Station {
	return predicate.Station(sql.FieldGT(FieldAgencyName, v))
}

// AgencyNameGTE applies the GTE predicate on the "agencyName" field.
func AgencyNameGTE(v string) predicate.Station {
	return predicate.Station(sql.FieldGTE(FieldAgencyName, v))
}

// AgencyNameLT applies the LT predicate on the "agencyName" field.
func AgencyNameLT(v string) predicate.Station {
	return predicate.Station(sql.FieldLT(FieldAgencyName, v))
}

// AgencyNameLTE applies the LTE predicate on the "agencyName" field.
func AgencyNameLTE(v string) predicate.Station {
	return predicate.Station(sql.FieldLTE(FieldAgencyName, v))
}

// AgencyNameContains applies the Contains predicate on the "agencyName" field.
func AgencyNameContains(v string) predicate.Station {
	return predicate.Station(sql.FieldContains(FieldAgencyName, v))
}

// AgencyNameHasPrefix applies the HasPrefix predicate on the "agencyName" field.
func AgencyNameHasPrefix(v string) predicate.Station {
	return predicate.Station(sql.FieldHasPrefix(FieldAgencyName, v))
}

// AgencyNameHasSuffix applies the HasSuffix predicate on the "agencyName" field.
func AgencyNameHasSuffix(v string) predicate.Station {
	return predicate.Station(sql.FieldHasSuffix(FieldAgencyName, v))
}

// AgencyNameEqualFold applies the EqualFold predicate on the "agencyName" field.
func AgencyNameEqualFold(v string) predicate.Station {
	return predicate.Station(sql.FieldEqualFold(FieldAgencyName, v))
}

// AgencyNameContainsFold applies the ContainsFold predicate on the "agencyName" field.
func AgencyNameContainsFold(v string) predicate.Station {
	return predicate.Station(sql.FieldContainsFold(FieldAgencyName, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Station {
	return predicate.Station(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Station {
	return predicate.Station(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Station {
	return predicate.Station(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Station {
	return predicate.Station(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Station {
	return predicate.Station(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Station {
	return predicate.Station(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Station {
	return predicate.Station(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Station {
	return predicate.Station(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Station {
	return predicate.Station(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Station {
	return predicate.Station(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Station {
	return predicate.Station(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Station {
	return predicate.Station(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Station {
	return predicate.Station(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Station {
	return predicate.Station(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Station {
	return predicate.Station(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Station {
	return predicate.Station(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Station) predicate.Station {
	return predicate.Station(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Station) predicate.Station {
	return predicate.Station(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Station) predicate.Station {
	return predicate.Station(sql.NotPredicates(p))
}
